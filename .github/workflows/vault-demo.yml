
name: Testing on-prem vault integration

on: [push]

jobs:
  build:
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
    steps:
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v2
      - name: Troubleshooting
        run: |
            curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | \
            jq "{ jwt: .value, role: \"$VAULT_ROLE\" }" > ./token.json
            cat token.json
              
            echo 'GitHub Actions Token Claims'
            cat ./token.json | jq -r '.jwt | split(".") | .[1] | @base64d' | jq
            echo 'Vault Login Response'
            echo curl -k -sSLf -X POST -H "Content-Type: application/json" -H "X-Vault-Namespace: admin" --data @token.json $VAULT_URL/v1/auth/$VAULT_AUTH_PATH/login
            curl -k -sSLf -X POST -H "Content-Type: application/json" -H "X-Vault-Namespace: admin" --data @token.json $VAULT_URL/v1/auth/$VAULT_AUTH_PATH/login
            # Remove the token file when we're done (if we don't fail)
            rm ./token.json
        env:
          VAULT_URL: "https://vault.oss.cloudp.libgbl.net"
          VAULT_AUTH_PATH: jwt_github
          VAULT_ROLE: "group_cloudp"

      - name: Retrieve Secrets
        id: secretdata
        uses: hashicorp/vault-action@v2.4.0
        with: 
          method: jwt
          path: jwt_github
          url: ${{ secrets.VAULT_ADDR }}
          role: group_cloudp
          caCertificate: ${{ secrets.VAULT_CA_CERT }}
          secrets: |
            secrets/data/cloudp/init my_secret | MY_SECRET


      # - name: Retrieve Secrets
      #   id: secretdata
      #   uses: hashicorp/vault-action@v2.4.0
      #   with: 
      #     method: jwt
      #     url: ${{ secrets.VAULT_ADDR }}
      #     role: group_cloudp
      #     caCertificate: ${{ secrets.VAULT_CA_CERT }}
      #     secrets: ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.VAULT_SECRET_KEY }} | MY_SECRET

      - name: Print Secrets
        run: |
            echo '${{ steps.secretdata.outputs.MY_SECRET }}'
            echo '${{ steps.secretdata.outputs.MY_SECRET }}' | sum
            echo '${{ steps.secretdata.outputs.MY_SECRET }}' | md5sum


    #- name: Retrieve Secrets
    #  id: secretdata
    #  uses: hashicorp/vault-action@v2.4.0
    #  with: 
    #    method: jwt
    #    url: ${{ secrets.VAULT_ADDR }}
    #    namespace: ${{ secrets.VAULT_NAMESPACE }}
    #    role: ${{ secrets.VAULT_ROLE }}
    #    secrets: ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.VAULT_SECRET_KEY }} | MY_SECRET

    #- name: Print Secrets
    #  run: |
    #      echo '${{ steps.secretdata.outputs.MY_SECRET }}'
    #  - uses: actions/checkout@v2
    #  - name: Retrieve secret from Vault
    #    uses: hashicorp/vault-action@v2.4.0
    #    with:
    #      method: jwt
    #      path: "jwt"
    #        #token: ${{ secrets.VAULT_TOKEN }}
    #      caCertificate: ${{secrets.VAULT_CA_CERT}}
    #      url: "https://vault.oss.cloudp.libgbl.net"
    #      jwtGithubAudience: sigstore
    #      role: group_cloudp
    #      secrets: |
    #        /secrets/data/cloudp/init my_secret | MY_SECRET
    # steps:
    #   - run: |
    #      env | sort
    #      echo ${MY_SECRET} > myfile.txt
    #      ls -al
    #      cat myfile.txt
    #      cp myfile.txt b
    #      cat b

    # - uses: actions/checkout@v2
    # - name: pre-reqs
    #   run: |
    #      echo "Performing pre-req setup"
    #      echo "...installing vault binary"
    #      sudo apt update 
    #      sudo apt install -y gpg apt-utils wget curl unzip 
    #      wget https://releases.hashicorp.com/vault/1.13.2/vault_1.13.2_linux_amd64.zip 
    #      unzip vault_1.13.2_linux_amd64.zip 
    #      chmod +x vault
    #      sudo mv vault /usr/local/bin

    # - name: vault-demo
    #   env:
    #      VAULT_ADDR: https://vault.oss.cloudp.libgbl.net
    #      VAULT_CACERT: ./certs/vault_ca.crt
    #      VAULT_ROLE: group_cloudp
    #      VAULT_SECRET_PATH: /secrets/cloudp/init
    #      VAULT_SECRET_VALUE: my_secret
    #   run: |
    #      vault version
    #      echo "Getting vault token(vault auth using JWT token)"
    #      export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=${VAULT_ROLE} jwt=${CI_JOB_JWT})"
    #      [ $? -eq 0 ] && echo "Vault token fetch: SUCCESS!"
    #      echo "Fetching secret from vault path: ${VAULT_SECRET_PATH}"
    #      export SECRET="$(vault kv get -field=${VAULT_SECRET_VALUE} ${VAULT_SECRET_PATH})"
    #      echo "Got Secret: ${SECRET}"

